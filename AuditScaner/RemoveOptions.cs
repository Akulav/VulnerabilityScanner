using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AuditScaner
{
    public partial class RemoveOptions : Form
    {
        private string selectedFile;
        private string[] lines;
        private string fileLocation = "C:\\VulnerabilityScanner";
        private string[] reg_key = new string[999];
        private string[] value_data = new string[999];
        private string[] reg_item = new string[999];
        private string[] description = new string[999];
        private int index = 0;
        private List<int> vulnerabilities = new List<int>();
        public RemoveOptions()
        {
            selectedFile = EditPolicy.selected;
            InitializeComponent();
            HideDialog();
            getAuditData();
            parseData();
        }

        private void RemoveOptions_Load(object sender, EventArgs e)
        {

        }

        private void backToEditPolicies_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void getAuditData()
        {
            lines = System.IO.File.ReadAllLines(@selectedFile);
        }

        private void parseData()
        {

            var reg = new Regex("\"(.*?)\"");

            for (int i = 0; i < lines.Length; i++)
            {

                if (lines[i].Contains("value_data"))
                {


                    /*
                    var matches = reg.Matches(lines[i]);

                    foreach (var item in matches)
                    {

                        value_data[index] = item.ToString().Replace("\"", "");

                    }
                    */
                    var matches = reg.Matches(lines[i]);
                    Regex numbers = new Regex(@"\d+");
                    Match input_string = numbers.Match(lines[i]);

                    if (input_string.Success)
                    {
                        value_data[index] = input_string.Value;
                    }
                    else
                    {
                        value_data[index] = matches[0].ToString().Replace("\"", "");
                    }



                }

                if (lines[i].Contains("reg_key"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {

                        reg_key[index] = item.ToString().Replace("\"", "");
                        if (item.ToString().Contains("HKLM")) { reg_key[index] = item.ToString().Replace("HKLM", "HKEY_LOCAL_MACHINE"); }
                        if (item.ToString().Contains("HKU")) { reg_key[index] = item.ToString().Replace("HKU", "HKEY_USERS"); }

                    }
                }


                if (lines[i].Contains("reg_item"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        reg_item[index] = item.ToString().Replace("\"", "");
                    }

                    index++;
                }

                if (lines[i].Contains("description"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        description[index] = item.ToString().Replace("\"", "");
                    }


                }



            }

            for (int i = 0; i < index; i++)
            {
                OptionList.Items.Add(description[i]);
            }

        }

        private void Save_Click(object sender, EventArgs e)
        {
            File.Delete(selectedFile);
            int[] selectedVulnerabilities = OptionList.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                using (StreamWriter writetext = File.AppendText(selectedFile))
                {

                    writetext.WriteLine("description" + " " + "\"" + description[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("reg_key" + " " + "\"" + reg_key[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("reg_item" + " " + "\"" + reg_item[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("value_data" + " " + "\"" + value_data[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine(Environment.NewLine);
                }
            }

            HideForDialog();
            


        }

        private void HideForDialog()
        {
            OptionList.Hide();
            Save.Hide();
            SaveNew.Hide();
            Search.Hide();
            SearchField.Hide();
            backToEditPolicies.Hide();
            Dialog.Show();
            DialogLabel.Show();
        }

        private void HideDialog()
        {
            Dialog.Hide();
            DialogLabel.Hide();
        }

        private void Dialog_Click(object sender, EventArgs e)
        {
            resetData();
            this.Close();
        }

        private void resetData()
        {
            index = 0;
            Array.Clear(reg_key, 0, reg_key.Length);
            Array.Clear(reg_item, 0, reg_key.Length);
            Array.Clear(value_data, 0, reg_key.Length);
            Array.Clear(description, 0, reg_key.Length);
            vulnerabilities.Clear();
            selectedFile = "";
            Array.Clear(lines, 0, lines.Length);
        }
    }
}
