using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace AuditScaner
{
    public partial class RemoveOptions : Form
    {
        private string selectedFile;
        private string[] lines;
        private readonly string fileLocation = "C:\\VulnerabilityScanner";
        private string[] reg_key = new string[999];
        private string[] value_data = new string[999];
        private string[] reg_item = new string[999];
        private string[] description = new string[999];
        private int index = 0;
        private List<int> searchIndexes = new List<int>();
        private List<int> vulnerabilities = new List<int>();
        public RemoveOptions()
        {
            selectedFile = EditPolicy.selected;
            InitializeComponent();
            HideDialog();
            getAuditData();
            parseData();
        }

        private void RemoveOptions_Load(object sender, EventArgs e)
        {

        }

        private void backToEditPolicies_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void getAuditData()
        {
            lines = File.ReadAllLines(@selectedFile);
        }

        private void parseData()
        {

            var reg = new Regex("\"(.*?)\"");

            for (int i = 0; i < lines.Length; i++)
            {

                if (lines[i].Contains("value_data"))
                {


                    /*
                    var matches = reg.Matches(lines[i]);

                    foreach (var item in matches)
                    {

                        value_data[index] = item.ToString().Replace("\"", "");

                    }
                    */
                    var matches = reg.Matches(lines[i]);
                    Regex numbers = new Regex(@"\d+");
                    Match input_string = numbers.Match(lines[i]);

                    if (input_string.Success)
                    {
                        value_data[index] = input_string.Value;
                    }
                    else
                    {
                        value_data[index] = matches[0].ToString().Replace("\"", "");
                    }



                }

                if (lines[i].Contains("reg_key"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {

                        reg_key[index] = item.ToString().Replace("\"", "");
                        if (item.ToString().Contains("HKLM")) { reg_key[index] = item.ToString().Replace("HKLM", "HKEY_LOCAL_MACHINE"); }
                        if (item.ToString().Contains("HKU")) { reg_key[index] = item.ToString().Replace("HKU", "HKEY_USERS"); }

                    }
                }


                if (lines[i].Contains("reg_item"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        reg_item[index] = item.ToString().Replace("\"", "");
                    }

                    index++;
                }

                if (lines[i].Contains("description"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        description[index] = item.ToString().Replace("\"", "");
                    }


                }



            }

            for (int i = 0; i < index; i++)
            {
                OptionList.Items.Add(description[i]);
            }

        }

        private void Save_Click(object sender, EventArgs e)
        {
            File.Delete(selectedFile);
            int[] selectedVulnerabilities = OptionList.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                using (StreamWriter writetext = File.AppendText(selectedFile))
                {

                    writetext.WriteLine("description" + " " + "\"" + description[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("reg_key" + " " + reg_key[selectedVulnerabilities[i]]);
                    writetext.WriteLine("reg_item" + " " + "\"" + reg_item[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("value_data" + " " + "\"" + value_data[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine(Environment.NewLine);
                }
            }

            HideForDialog();



        }

        private void HideForDialog()
        {
            OptionList.Hide();
            Save.Hide();
            SaveNew.Hide();
            Search.Hide();
            SearchField.Hide();
            backToEditPolicies.Hide();
            select.Hide();
            deselect.Hide();
            Dialog.Show();
            DialogLabel.Show();
        }

        private void HideDialog()
        {
            Dialog.Hide();
            DialogLabel.Hide();
        }

        private void Dialog_Click(object sender, EventArgs e)
        {
            resetData();
            Close();
        }

        private void resetData()
        {
            index = 0;
            Array.Clear(reg_key, 0, reg_key.Length);
            Array.Clear(reg_item, 0, reg_key.Length);
            Array.Clear(value_data, 0, reg_key.Length);
            Array.Clear(description, 0, reg_key.Length);
            vulnerabilities.Clear();
            selectedFile = "";
            Array.Clear(lines, 0, lines.Length);
        }

        private void SaveNew_Click(object sender, EventArgs e)
        {
            string newFile = MakeCopy.ShowDialog("Enter a new name for the policy", "Make copy");
            File.Copy(selectedFile, selectedFile.Replace(Path.GetFileName(selectedFile), newFile + ".audit"));

            selectedFile = selectedFile.Replace(Path.GetFileName(selectedFile), newFile + ".audit");
            File.Delete(selectedFile);
            int[] selectedVulnerabilities = OptionList.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                using (StreamWriter writetext = File.AppendText(selectedFile))
                {

                    writetext.WriteLine("description" + " " + "\"" + description[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("reg_key" + " " + reg_key[selectedVulnerabilities[i]]);
                    writetext.WriteLine("reg_item" + " " + "\"" + reg_item[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine("value_data" + " " + "\"" + value_data[selectedVulnerabilities[i]] + "\"");
                    writetext.WriteLine(Environment.NewLine);
                }
            }

            HideForDialog();


        }

        public static string ShowDialog(string text, string caption)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen,
                BackColor = Color.FromArgb(34, 33, 74)
            };

            Label textLabel = new Label() { Left = 50, Top = 20, Text = text };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 400 };
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? textBox.Text : "";
        }

        private void Search_Click(object sender, EventArgs e)
        {

            SearchFor();


        }

        private void SearchFor()
        {
            if (!string.IsNullOrEmpty(SearchField.Text))
            {
                // Find the item in the list and store the index to the item.
                int index = OptionList.FindString(SearchField.Text);
                // Determine if a valid index is returned. Select the item if it is valid.
                if (index != -1)
                    OptionList.SetSelected(index, true);
                else
                    MessageBox.Show("The search string did not match any items");
            }
        }

        private void select_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < OptionList.Items.Count; i++)
            {
                OptionList.SetItemChecked(i, true);
            }
        }

        private void deselect_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < OptionList.Items.Count; i++)
            {
                OptionList.SetItemChecked(i, false);
            }
        }

        private void SearchField_KeyPress(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SearchFor();
            }
        }

    }
}
