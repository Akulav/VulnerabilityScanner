using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace AuditScaner
{
    public partial class RemoveOptions : Form
    {
        public static int identifier = 2;
        private string selectedFile;
        private string[] lines;
        private readonly string fileLocation = "C:\\VulnerabilityScanner";
        private int index = 0;
        private List<int> vulnerabilities = new List<int>();
        private Form currentChildForm;
        struct REGISTRY_SETTING
        {
            public string type;
            public string description;
            public string value_data;
            public string reg_key;
            public string reg_item;
        }

        REGISTRY_SETTING[] RGS = new REGISTRY_SETTING[999];
        public RemoveOptions()
        {
            selectedFile = EditPolicy.selected;
            InitializeComponent();
            getAuditData();
            parseData();
        }

        private void backToEditPolicies_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void getAuditData()
        {
            lines = File.ReadAllLines(@selectedFile);
        }

        private void parseData()
        {

            var reg = new Regex("\"(.*?)\"");

            for (int i = 0; i < lines.Length; i++)
            {

                if (lines[i].Contains("REGISTRY_SETTING"))
                {
                    
                    while (lines[i].Contains("</custom_item>") == false)
                    {
                        
                        i++;

                        if (lines[i].Contains("value_data"))
                        {

                            var matches = reg.Matches(lines[i]);
                            Regex numbers = new Regex(@"\d+");
                            Match input_string = numbers.Match(lines[i]);

                            if (input_string.Success)
                            {   
                                RGS[index].value_data = input_string.Value;
                            }
                            else
                            {
                                RGS[index].value_data = matches[0].ToString().Replace("\"", "");
                            }

                        }

                        if (lines[i].Contains("reg_key"))
                        {
                            var matches = reg.Matches(lines[i]);
                            foreach (var item in matches)
                            {
                                RGS[index].reg_key = item.ToString().Replace("\"", "");
                                if (item.ToString().Contains("HKLM")) { RGS[index].reg_key = item.ToString().Replace("HKLM", "HKEY_LOCAL_MACHINE"); }
                                if (item.ToString().Contains("HKU")) { RGS[index].reg_key = item.ToString().Replace("HKU", "HKEY_USERS"); }
                            }
                        }


                        if (lines[i].Contains("reg_item"))
                        {
                            var matches = reg.Matches(lines[i]);
                            foreach (var item in matches)
                            {
                                RGS[index].reg_item = item.ToString().Replace("\"", "");
                            }

                            index++;
                        }

                        if (lines[i].Contains("description"))
                        {
                            var matches = reg.Matches(lines[i]);
                            foreach (var item in matches)
                            {
                                RGS[index].description = item.ToString().Replace("\"", "");
                            }


                        }
                    }
                }

            }

            for (int i = 0; i < index; i++)
            {
                OptionList.Items.Add(RGS[i].description);
            }

        }

        private void Save_Click(object sender, EventArgs e)
        {
            File.Delete(selectedFile);
            int[] selectedVulnerabilities = OptionList.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                using (StreamWriter writetext = File.AppendText(selectedFile))
                {
                    writetext.WriteLine("<custom_item>");
                    writetext.WriteLine("REGISTRY_SETTING");
                    writetext.WriteLine("description" + " " + "\"" + RGS[selectedVulnerabilities[i]].description + "\"");
                    writetext.WriteLine("reg_key" + " " + RGS[selectedVulnerabilities[i]].reg_key);
                    writetext.WriteLine("reg_item" + " " + "\"" + RGS[selectedVulnerabilities[i]].reg_item + "\"");
                    writetext.WriteLine("value_data" + " " + "\"" + RGS[selectedVulnerabilities[i]].value_data + "\"");
                    writetext.WriteLine("</custom_item>");
                    writetext.WriteLine(Environment.NewLine);
                    
                }
            }
            resetData();
            OpenChildForm(new SuccessDialog());

        }

        private void OpenChildForm(Form childForm)
        {
            currentChildForm = childForm;
            childForm.TopLevel = false;
            childForm.FormBorderStyle = FormBorderStyle.None;
            childForm.Dock = DockStyle.Fill;
            Controls.Add(childForm);
            childForm.Tag = childForm;
            childForm.BringToFront();
            childForm.Show();
        }

        private void resetData()
        {
            index = 0;
            Array.Clear(RGS, 0, RGS.Length);
            vulnerabilities.Clear();
            selectedFile = "";
            Array.Clear(lines, 0, lines.Length);
        }

        private void SaveNew_Click(object sender, EventArgs e)
        {
            string newFile = MakeCopy.ShowDialog("Enter a new name for the policy", "Make copy");
            File.Copy(selectedFile, selectedFile.Replace(Path.GetFileName(selectedFile), newFile + ".audit"));

            selectedFile = selectedFile.Replace(Path.GetFileName(selectedFile), newFile + ".audit");
            File.Delete(selectedFile);
            int[] selectedVulnerabilities = OptionList.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                using (StreamWriter writetext = File.AppendText(selectedFile))
                {

                    writetext.WriteLine("<custom_item>");
                    writetext.WriteLine("REGISTRY_SETTING");
                    writetext.WriteLine("description" + " " + "\"" + RGS[selectedVulnerabilities[i]].description + "\"");
                    writetext.WriteLine("reg_key" + " " + RGS[selectedVulnerabilities[i]].reg_key);
                    writetext.WriteLine("reg_item" + " " + "\"" + RGS[selectedVulnerabilities[i]].reg_item + "\"");
                    writetext.WriteLine("value_data" + " " + "\"" + RGS[selectedVulnerabilities[i]].value_data + "\"");
                    writetext.WriteLine("</custom_item>");
                    writetext.WriteLine(Environment.NewLine);
                }
            }
            resetData();
            OpenChildForm(new SuccessDialog());

        }

        public static string ShowDialog(string text, string caption)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen,
                BackColor = Color.FromArgb(34, 33, 74)
            };

            Label textLabel = new Label() { Left = 50, Top = 20, Text = text };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 400 };
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? textBox.Text : "";
        }

        private void Search_Click(object sender, EventArgs e)
        {
            SearchFor();
        }

        private void SearchFor()
        {
            if (!string.IsNullOrEmpty(SearchField.Text))
            {
                // Find the item in the list and store the index to the item.
                int index = OptionList.FindString(SearchField.Text);
                // Determine if a valid index is returned. Select the item if it is valid.
                if (index != -1)
                    OptionList.SetSelected(index, true);
                else
                    MessageBox.Show("The search string did not match any items");
            }
        }

        private void select_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < OptionList.Items.Count; i++)
            {
                OptionList.SetItemChecked(i, true);
            }
        }

        private void deselect_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < OptionList.Items.Count; i++)
            {
                OptionList.SetItemChecked(i, false);
            }
        }

        private void SearchField_KeyPress(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SearchFor();
            }
        }
    }
}
