using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace AuditScaner
{

    public partial class Form1 : Form
    {
        public string selectedFileName;
        public string[] lines;
        public string fileLocation = "C:\\VulnerabilityScanner";
        public string[] reg_key = new string[999];
        public string[] value_data = new string[999];
        public string[] reg_item = new string[999];
        public string[] description = new string[999];
        public int index = 0;
        public List<int> vulnerabilities = new List<int>();

        public Form1()
        {

            enforceAdminPrivilegesWorkaround();
            InitializeComponent();
            disableButtons();
            getWindowsVersion();
            initializeDataSet();
            populateDropDown();
            fileList.DropDownStyle = ComboBoxStyle.DropDownList;

        }

        private void CustomScan_Click(object sender, EventArgs e)
        {
            selectFile();
        }

        private void StartScan_Click(object sender, EventArgs e)
        {
            selectedFileName = fileList.Text;
            getAuditData();
            parseData();
            scanRegistry(reg_key, reg_item, value_data);
            ScanResults.ShowResults("Scanned:", "Scan Result", reg_key, reg_item, value_data, description, vulnerabilities);
        }

        public void scanRegistry(string[] reg_key, string[] reg_item, string[] value_data)
        {
            for (int i = 0; i < index; i++)
            {
                reg_key[i] = reg_key[i].Replace("\"", "");
                object value = Registry.GetValue(reg_key[i], reg_item[i], null);

                if (value != null)
                {

                    if (value.ToString() != value_data[i])
                    {
                        vulnerabilities.Add(i);
                    }

                }

                else
                {
                    vulnerabilities.Add(i); 
                }

            }
        }

        public void parseData()
        {

            var reg = new Regex("\"(.*?)\"");

            for (int i = 0; i < lines.Length; i++)
            {

                if (lines[i].Contains("value_data"))
                {

                    var matches = reg.Matches(lines[i]);
                    Regex numbers = new Regex(@"\d+");
                    Match input_string = numbers.Match(lines[i]);

                    if (input_string.Success)
                    {
                        value_data[index] = input_string.Value;
                    }
                    else
                    {
                        value_data[index] = matches[0].ToString().Replace("\"", "");
                    }



                }

                if (lines[i].Contains("reg_key"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {

                        reg_key[index] = item.ToString().Replace("\"", "");
                        if (item.ToString().Contains("HKLM")) { reg_key[index] = item.ToString().Replace("HKLM", "HKEY_LOCAL_MACHINE"); }
                        if (item.ToString().Contains("HKU")) { reg_key[index] = item.ToString().Replace("HKU", "HKEY_USERS"); }

                    }
                }


                if (lines[i].Contains("reg_item"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        reg_item[index] = item.ToString().Replace("\"", "");
                    }

                    index++;
                }

                if (lines[i].Contains("description"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        description[index] = item.ToString().Replace("\"", "");
                    }


                }

            }

        }

        public void dbg(string message)
        {
            MessageBox.Show(message);
        }

        public void disableButtons()
        {
            SaveAsNew.Enabled = false;
            DeletePolicy.Enabled = false;
            StartScan.Enabled = false;
        }

        public void enableButtons()
        {
            SaveAsNew.Enabled = true;
            DeletePolicy.Enabled = true;
            StartScan.Enabled = true;
        }

        public void populateDropDown()
        {
            fileList.Items.AddRange(Directory.GetFiles(fileLocation));
        }

        public void initializeDataSet()
        {
            string root = @"C:\";
            string subdir = @"C:\VulnerabilityScanner";
            if (!Directory.Exists(root))
            {
                Directory.CreateDirectory(root);
            }


            if (!Directory.Exists(subdir))
            {
                Directory.CreateDirectory(subdir);
            }
        }

        public void reloadFileList()
        {
            fileList.Items.Clear();
            populateDropDown();
            disableButtons();
        }

        public void selectFile()
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.InitialDirectory = "c:\\";
            openFileDialog1.Filter = "Audit files (*.audit)|*.audit*";
            openFileDialog1.FilterIndex = 0;
            openFileDialog1.RestoreDirectory = true;

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                selectedFileName = openFileDialog1.FileName;
            }
            try
            {
                File.Copy(selectedFileName, fileLocation + "\\" + Path.GetFileName(selectedFileName));
            }
            catch (IOException)
            {
                MessageBox.Show("File Already Exists");
            }
            reloadFileList();

        }

        public void getAuditData()
        {
            lines = File.ReadAllLines(@selectedFileName);
        }
        public void getWindowsVersion()
        {

            object os_version = Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ReleaseId", 1);

            if (os_version != null)
            {
                OS_Build.Text = os_version.ToString();
            }

            else
            {
                OS_Build.Text = "Could not read Windows Build";
            }

        }

        public void enforceAdminPrivilegesWorkaround()
        {
            RegistryKey rk;
            string registryPath = @"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\";

            try
            {
                if (Environment.Is64BitOperatingSystem)
                {
                    rk = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);
                }
                else
                {
                    rk = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32);
                }

                rk = rk.OpenSubKey(registryPath, true);
            }
            catch (System.Security.SecurityException)
            {
                MessageBox.Show("Please run as administrator");
                Environment.Exit(1);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
            }
        }

        public void resetData()
        {
            index = 0;
            Array.Clear(reg_key, 0, reg_key.Length);
            Array.Clear(reg_item, 0, reg_key.Length);
            Array.Clear(value_data, 0, reg_key.Length);
            Array.Clear(description, 0, reg_key.Length);
            vulnerabilities.Clear();
        }

        private void DeletePolicy_Click(object sender, EventArgs e)
        {
            string selected = fileList.Text;
            File.Delete(selected);
            reloadFileList();
        }

        private void fileList_SelectedIndexChanged(object sender, EventArgs e)
        {
            enableButtons();
            resetData();
        }

        private void SaveAsNew_Click(object sender, EventArgs e)
        {
            string newFile = MakeCopy.ShowDialog("Enter a new name for the policy", "Make copy");
            string selected = fileList.Text;
            File.Copy(selected, selected.Replace(Path.GetFileName(selected), newFile + ".audit"));
            reloadFileList();
        }

    }

    public static class MakeCopy
    {
        public static string ShowDialog(string text, string caption)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen
            };
            Label textLabel = new Label() { Left = 50, Top = 20, Text = text };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 400 };
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? textBox.Text : "";
        }
    }

    public static class ScanResults
    {
        public static void ShowResults(string text, string caption, string[] reg_key, string[] reg_item, string[] value_data, string[] description, List<int> vulnerabilities)
        {
            Form ScanResults = new Form()
            {
                Width = 1900,
                Height = 600,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = "Found " + vulnerabilities.Count + " issues.",
                StartPosition = FormStartPosition.CenterScreen
            };
            CheckedListBox data = new CheckedListBox() { Left = 50, Top = 50, Width = 1800, Height = 400 };
            Label textLabel = new Label() { Left = 50, Top = 20, Text = text };
            Button applySelected = new Button() { Top = 500, Left = 50, Width = 100 };
            Button applyAll = new Button() { Top = 500, Left = 200, Width = 100 };
            applyAll.Text = "Apply all";
            applySelected.Text = "Apply selected";

            ScanResults.Controls.Add(textLabel);
            ScanResults.Controls.Add(data);
            ScanResults.Controls.Add(applySelected);
            ScanResults.Controls.Add(applyAll);

            foreach (Control item in ScanResults.Controls)
            {
                item.Anchor = (AnchorStyles.Bottom | AnchorStyles.Right | AnchorStyles.Top | AnchorStyles.Left);
            }

            for (int i = 0; i < vulnerabilities.Count; i++)
            {

                data.Items.Add("Description: " + description[vulnerabilities[i]] + "            " + value_data[vulnerabilities[i]], false);

            }

            applyAll.Click += (sender, e) =>
            {
                for (int i = 0; i < vulnerabilities.Count; i++)
                {

                    try
                    {
                        Registry.SetValue(reg_key[vulnerabilities[i]], reg_item[vulnerabilities[i]], value_data[vulnerabilities[i]]);
                    }

                    catch
                    {
                        MessageBox.Show("Audit data about:" + description[vulnerabilities[i]]);
                        data.Items.RemoveAt(vulnerabilities[i]);
                        continue;
                    }



                }
            };

            applySelected.Click += (sender, e) =>
            {
                int[] selectedVulnerabilities = data.CheckedIndices.Cast<int>().ToArray();
                for (int i = 0; i < selectedVulnerabilities.Count(); i++)
                {
                    try
                    {
                        Registry.SetValue(reg_key[vulnerabilities[selectedVulnerabilities[i]]], reg_item[vulnerabilities[selectedVulnerabilities[i]]], value_data[vulnerabilities[selectedVulnerabilities[i]]]);
                    }
                    catch
                    {
                        MessageBox.Show("Windows version not compatible with data about: " + description[vulnerabilities[i]]);
                        data.Items.RemoveAt(selectedVulnerabilities[i]);
                        continue;
                    }
                    data.Items.RemoveAt(selectedVulnerabilities[i]);
                }


            };

            ScanResults.Show();
        }




    }

}



//EXAMPLE OF REGISTRY SET VALUE
//Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ReleaseId", "2009");

//EXAMPLE OF REGISTRY GET VALUE
//using (RegistryKey key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"))
//Object os_version = key.GetValue("ReleaseId");

//POSSIBLE SHORTER GET VALUE
//Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ReleaseId", 1);
