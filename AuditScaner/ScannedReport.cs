using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace AuditScaner
{
    public partial class ScannedReport : Form
    {
        public static int identifier = 1;
        private Form currentChildForm;
        private string selectedFileName;
        private string[] lines;
        private readonly string fileLocation = "C:\\VulnerabilityScanner";
        private int index = 0;
        private List<int> vulnerabilities = new List<int>();
        private List<int> passed = new List<int>();

        struct REGISTRY_SETTING
        {
            public string type;
            public string description;
            public string value_data;
            public string reg_key;
            public string reg_item;
        }

        REGISTRY_SETTING[] RGS = new REGISTRY_SETTING[999];

        public ScannedReport()
        {
            InitializeComponent();
            selectedFileName = Scan.selectedFileName;
            //Form settings
            Text = "Scan for Vulnerabilities";
            ControlBox = false;
            DoubleBuffered = true;
            MaximizedBounds = Screen.FromHandle(Handle).WorkingArea;
            getAuditData();
            parseData();
            scanRegistry();
            ShowResults();
        }

        private void parseData()
        {

            var reg = new Regex("\"(.*?)\"");

            for (int i = 0; i < lines.Length; i++)
            {
                
                if (lines[i].Contains("REGISTRY_SETTING")){

                    while (lines[i].Contains("</custom_item>") == false)
                    {
                        i++;

                        if (lines[i].Contains("value_data"))
                        {

                            var matches = reg.Matches(lines[i]);
                            Regex numbers = new Regex(@"\d+");
                            Match input_string = numbers.Match(lines[i]);

                            if (input_string.Success)
                            {
                                RGS[index].value_data = input_string.Value;
                            }
                            else
                            {
                                RGS[index].value_data = matches[0].ToString().Replace("\"", "");
                            }

                        }

                        if (lines[i].Contains("reg_key"))
                        {
                            var matches = reg.Matches(lines[i]);
                            foreach (var item in matches)
                            { 
                                RGS[index].reg_key = item.ToString().Replace("\"", "");
                                if (item.ToString().Contains("HKLM")) { RGS[index].reg_key = item.ToString().Replace("HKLM", "HKEY_LOCAL_MACHINE"); }
                                if (item.ToString().Contains("HKU")) { RGS[index].reg_key = item.ToString().Replace("HKU", "HKEY_USERS"); }
                            }
                        }


                        if (lines[i].Contains("reg_item"))
                        {
                            var matches = reg.Matches(lines[i]);
                            foreach (var item in matches)
                            {
                                RGS[index].reg_item = item.ToString().Replace("\"", "");
                            }

                            index++;
                        }

                        if (lines[i].Contains("description"))
                        {
                            var matches = reg.Matches(lines[i]);
                            foreach (var item in matches)
                            {
                                RGS[index].description = item.ToString().Replace("\"", "");
                            }


                        }
                    }
                }

            }

        }

        private void scanRegistry()
        {
            for (int i = 0; i < index; i++)
            {
                RGS[i].reg_key = RGS[i].reg_key.Replace("\"", string.Empty);
                object value = Registry.GetValue(RGS[i].reg_key, RGS[i].reg_item, null);

                if (value != null)
                {

                    if (value.ToString() != RGS[i].value_data)
                    {
                        vulnerabilities.Add(i);
                    }

                    else
                    {
                        passed.Add(i);
                    }

                }

                else
                {
                    vulnerabilities.Add(i); //uncomment if add even values non existing
                }

            }
        }

        private void ShowResults()
        {
            for (int i = 0; i < vulnerabilities.Count; i++)
            {

                scanReport.Items.Add(RGS[vulnerabilities[i]].description + "   " + RGS[vulnerabilities[i]].value_data, false);
                scanReport.Height = 519;
            }

            for (int i = 0; i < passed.Count; i++)
            {
                passedReportList.Items.Add(RGS[passed[i]].description + "   " + RGS[passed[i]].description, false);
                passedReportList.Height = 519;
            }

        }

        private void ApplySelected_Click(object sender, EventArgs e)
        {
            int[] selectedVulnerabilities = scanReport.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                try
                {
                    Registry.SetValue(RGS[vulnerabilities[selectedVulnerabilities[i]]].reg_key, RGS[vulnerabilities[selectedVulnerabilities[i]]].reg_item, RGS[vulnerabilities[selectedVulnerabilities[i]]].value_data);
                }
                catch
                {
                    MessageBox.Show("Windows version not compatible with data about: " + RGS[vulnerabilities[i]].description);
                    scanReport.Items.RemoveAt(selectedVulnerabilities[i]);
                    continue;
                }
                //scanReport.Items.RemoveAt(selectedVulnerabilities[i]); //Possibly redunant since I go back anyway
            }

            OpenChildForm(new SuccessDialog());

        }

        private void ApplyAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < vulnerabilities.Count; i++)
            {

                try
                {
                    Registry.SetValue(RGS[vulnerabilities[i]].reg_key, RGS[vulnerabilities[i]].reg_item, RGS[vulnerabilities[i]].value_data);
                }

                catch
                {
                    MessageBox.Show("Windows version not compatible with data about: " + RGS[vulnerabilities[i]].description);
                    scanReport.Items.RemoveAt(vulnerabilities[i]);
                    continue;
                }

            }

            OpenChildForm(new SuccessDialog());


        }

        private void OpenChildForm(Form childForm)
        {
            currentChildForm = childForm;
            childForm.TopLevel = false;
            childForm.FormBorderStyle = FormBorderStyle.None;
            childForm.Dock = DockStyle.Fill;
            Controls.Add(childForm);
            childForm.Tag = childForm;
            childForm.BringToFront();
            childForm.Show();
        }

        private void getAuditData()
        {
            lines = System.IO.File.ReadAllLines(@selectedFileName);
        }

        private void showFailed_Click(object sender, EventArgs e)
        {
            passedReportList.Hide();
            scanReport.Show();
            showFailed.Hide();
            showPassed.Show();
        }

        private void backToScan_Click(object sender, EventArgs e)
        {
            resetData();
            Close();
        }

        private void resetData()
        {
            index = 0;
            selectedFileName = null;
            vulnerabilities.Clear();
            passed.Clear();
            scanReport.Items.Clear();
            Array.Clear(RGS, 0, RGS.Length);
        }

        private void showPassed_Click(object sender, EventArgs e)
        {
            passedReportList.Show();
            scanReport.Hide();
            showFailed.Show();
            showPassed.Hide();
        }

    }
}
