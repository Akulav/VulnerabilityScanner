using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AuditScaner
{
    public partial class Scan : Form
    {
        private string selectedFileName;
        private string[] lines;
        private string fileLocation = "C:\\VulnerabilityScanner";
        private string[] reg_key = new string[999];
        private string[] value_data = new string[999];
        private string[] reg_item = new string[999];
        private string[] description = new string[999];
        private int index = 0;
        private List<int> vulnerabilities = new List<int>();
        public Scan()
        {
            InitializeComponent();
            //Form settings
            this.Text = "Scan for Vulnerabilities";
            this.ControlBox = false;
            this.DoubleBuffered = true;
            this.MaximizedBounds = Screen.FromHandle(this.Handle).WorkingArea;
            //Prevent errors
            disableButtons();
            //Load files
            populateDropDown();
            //Hide Report Controls
            HideControls();
        }
        private void HideControls()
        {
            scanReport.Hide();
            ApplySelected.Hide();
            ApplyAll.Hide();
            backToScan.Hide();
        }

        private void ShowControls()
        {
            scanReport.Show();
            ApplySelected.Show();
            ApplyAll.Show();
            backToScan.Show();
        }

        private void FileList_SelectedIndexChanged(object sender, EventArgs e)
        {
            selectedFileName = FileList.Text;
            enableButtons();
        }


        private void disableButtons()
        {
            scanBtn.Enabled = false;
            ApplyAll.Enabled = false;
            ApplySelected.Enabled = false;
        }

        private void enableButtons()
        {
            scanBtn.Enabled = true;
            ApplyAll.Enabled = true;
            ApplySelected.Enabled = true;
        }

        private void populateDropDown()
        {
            FileList.Items.AddRange(System.IO.Directory.GetFiles(fileLocation));
        }

        private void reloadFileList()
        {
            FileList.Text = String.Empty;
            FileList.Items.Clear();
            populateDropDown();
            disableButtons();
        }

        private void scanBtn_Click(object sender, EventArgs e)
        {
            string selected = FileList.Text;
            getAuditData();
            parseData();
            scanRegistry(reg_key, reg_item, value_data);
            ShowResults();
        }

        private void getAuditData()
        {
            lines = System.IO.File.ReadAllLines(@selectedFileName);
        }

        private void parseData()
        {

            var reg = new Regex("\"(.*?)\"");

            for (int i = 0; i < lines.Length; i++)
            {

                if (lines[i].Contains("value_data"))
                {


                    /*
                    var matches = reg.Matches(lines[i]);

                    foreach (var item in matches)
                    {

                        value_data[index] = item.ToString().Replace("\"", "");

                    }
                    */
                    var matches = reg.Matches(lines[i]);
                    Regex numbers = new Regex(@"\d+");
                    Match input_string = numbers.Match(lines[i]);

                    if (input_string.Success)
                    {
                        value_data[index] = input_string.Value;
                    }
                    else
                    {
                        value_data[index] = matches[0].ToString().Replace("\"", "");
                    }



                }

                if (lines[i].Contains("reg_key"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {

                        reg_key[index] = item.ToString().Replace("\"", "");
                        if (item.ToString().Contains("HKLM")) { reg_key[index] = item.ToString().Replace("HKLM", "HKEY_LOCAL_MACHINE"); }
                        if (item.ToString().Contains("HKU")) { reg_key[index] = item.ToString().Replace("HKU", "HKEY_USERS"); }

                    }
                }


                if (lines[i].Contains("reg_item"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        reg_item[index] = item.ToString().Replace("\"", "");
                    }

                    index++;
                }

                if (lines[i].Contains("description"))
                {
                    var matches = reg.Matches(lines[i]);
                    foreach (var item in matches)
                    {
                        description[index] = item.ToString().Replace("\"", "");
                    }


                }

            }

        }

        private void scanRegistry(string[] reg_key, string[] reg_item, string[] value_data)
        {
            for (int i = 0; i < index; i++)
            {
                reg_key[i] = reg_key[i].Replace("\"", "");
                Object value = Registry.GetValue(reg_key[i], reg_item[i], null);

                if (value != null)
                {

                    if (value.ToString() != value_data[i])
                    {
                        vulnerabilities.Add(i);
                        //MessageBox.Show(value.ToString());
                        //MessageBox.Show(value_data[i]);
                        //MessageBox.Show(i.ToString());
                        //MessageBox.Show(description[i]);
                    }

                }

                else
                {
                    vulnerabilities.Add(i); //uncomment if add even values non existing
                }

            }
        }

        private void ShowResults()
        {
            for (int i = 0; i < vulnerabilities.Count; i++)
            {

                scanReport.Items.Add(description[vulnerabilities[i]] + "            " + value_data[vulnerabilities[i]], false);
                scanReport.Height = 379;
                ShowControls();
                scanBtn.Hide();
                FileList.Hide();
            }
        }

        private void Scan_Load(object sender, EventArgs e)
        {

        }

        private void ApplySelected_Click(object sender, EventArgs e)
        {
            int[] selectedVulnerabilities = scanReport.CheckedIndices.Cast<int>().ToArray();
            for (int i = 0; i < selectedVulnerabilities.Count(); i++)
            {
                try
                {
                    Registry.SetValue(reg_key[vulnerabilities[selectedVulnerabilities[i]]], reg_item[vulnerabilities[selectedVulnerabilities[i]]], value_data[vulnerabilities[selectedVulnerabilities[i]]]);
                }
                catch
                {
                    MessageBox.Show("Windows version not compatible with data about: " + description[vulnerabilities[i]]);
                    scanReport.Items.RemoveAt(selectedVulnerabilities[i]);
                    continue;
                }
                scanReport.Items.RemoveAt(selectedVulnerabilities[i]);
            }
        }

        private void ApplyAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < vulnerabilities.Count; i++)
            {

                try
                {
                    Registry.SetValue(reg_key[vulnerabilities[i]], reg_item[vulnerabilities[i]], value_data[vulnerabilities[i]]);
                }

                catch
                {
                    MessageBox.Show("Audit data about:" + description[vulnerabilities[i]]);
                    scanReport.Items.RemoveAt(vulnerabilities[i]);
                    continue;
                }

            }
        }

        private void backToScan_Click(object sender, EventArgs e)
        {
            resetData();
            scanReport.Hide();
            ApplySelected.Hide();
            ApplyAll.Hide();
            backToScan.Hide();
            scanBtn.Show();
            FileList.Show();
        }

        private void resetData()
        {
            index = 0;
            selectedFileName = null;
            Array.Clear(lines, 0 , lines.Length);
            Array.Clear(reg_key, 0, reg_key.Length);
            Array.Clear(reg_item, 0, reg_key.Length);
            Array.Clear(value_data, 0, reg_key.Length);
            Array.Clear(description, 0, reg_key.Length);
            vulnerabilities.Clear();
            scanReport.Items.Clear();       
            reloadFileList();
        }
    }
}
